// --- Profanity list & function (top of file so all functions can use it) ---
const PROFANITY_LIST = ["badword1", "badword2", "badword3"];

function containsProfanity(text) {
  const lower = text.toLowerCase();
  return PROFANITY_LIST.some(word => lower.includes(word));
}

// --- Original sendMessage function ---
async function sendMessage(userInput) {
  const response = await fetch("mrme77githubio-backend.vercel.app/chat", {
    method: "POST",
    headers: {
      "Content-Type": "application/json"
    },
    body: JSON.stringify({ prompt: userInput })
  });

  const data = await response.json();
  displayMessage(data.reply, "Pasquale-AI");
}

// --- Clock updater ---
function updateClocks() {
  const now = new Date();
  const options = {
    hour: '2-digit',
    minute: '2-digit',
    second: '2-digit',
    hour12: false,
  };
  document.getElementById('clock-pt').textContent =
    new Intl.DateTimeFormat('en-US', { ...options, timeZone: 'America/Los_Angeles' }).format(now);

  document.getElementById('clock-ct').textContent =
    new Intl.DateTimeFormat('en-US', { ...options, timeZone: 'America/Chicago' }).format(now);

  document.getElementById('clock-et').textContent =
    new Intl.DateTimeFormat('en-US', { ...options, timeZone: 'America/New_York' }).format(now);

  document.getElementById('clock-rome').textContent =
    new Intl.DateTimeFormat('en-US', { ...options, timeZone: 'Europe/Rome' }).format(now);
}

setInterval(updateClocks, 1000);
updateClocks();

// --- Tab switching ---
function showTab(tabId) {
  const tabs = document.querySelectorAll('.tab');
  tabs.forEach(tab => tab.classList.remove('active'));
  document.getElementById(tabId).classList.add('active');

  const cursors = document.querySelectorAll('.cursor');
  cursors.forEach(c => c.style.display = 'none');

  const activeCursor = document.getElementById('cursor-' + tabId);
  if (activeCursor) activeCursor.style.display = 'inline-block';
}
// --- Close chat button ---
document.getElementById("close-chat").addEventListener("click", () => {
  const chatWindow = document.getElementById("chatbot-window");
  const chatbox = document.getElementById("chatbox");

  chatbox.innerHTML = ""; // clear all messages
  chatWindow.style.display = "none"; // hide window
});

// --- Modified toggleChat to start fresh ---
function toggleChat() {
  const chatWindow = document.getElementById("chatbot-window");
  const chatbox = document.getElementById("chatbox");

  if (chatWindow.style.display === "flex") {
    chatWindow.style.display = "none";
  } else {
    chatbox.innerHTML = ""; // clear messages on open
    chatWindow.style.display = "flex";
  }
}
// --- Chat window toggle ---
// function toggleChat() {
//   const chatWindow = document.getElementById("chatbot-window");
//   chatWindow.style.display = chatWindow.style.display === "flex" ? "none" : "flex";
// }

// --- Main sendChat function with guardrails ---
async function sendChat() {
  const input = document.getElementById("chat-input");
  const message = input.value.trim();

  // Guardrail #0: Empty input
  if (!message) return;

  // Guardrail #1: Length check
  if (message.length > 150) {
    alert("Your message is too long. Please keep it under 150 characters.");
    return;
  }

  // Guardrail #2: Profanity check
  if (containsProfanity(message)) {
    alert("Your message contains inappropriate language.");
    return;
  }

  const chatbox = document.getElementById("chatbox");
  chatbox.innerHTML += `<div><strong>User:</strong> ${message}</div>`;
  input.value = '';

  try {
    const response = await fetch("mrme77githubio-backend.vercel.app/chat", {
      method: "POST",
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ prompt: message })
    });

    const data = await response.json();

    if (!data.reply) {
      chatbox.innerHTML += `<div><strong>Pasquale-AI:</strong> Sorry, no response received.</div>`;
    } else {
      chatbox.innerHTML += `<div><strong>Pasquale-AI:</strong> ${data.reply}</div>`;
    }
  } catch (err) {
    chatbox.innerHTML += `<div><strong>Pasquale-AI:</strong> Error connecting to server.</div>`;
  }

  chatbox.scrollTop = chatbox.scrollHeight;
}
// const messageBox = document.getElementById("message");
// const charCount = document.getElementById("charCount");

// messageBox.addEventListener("input", () => {
//   charCount.textContent = `${messageBox.value.length} / 255`;
// });
// const showFormBtn = document.getElementById("showFormBtn");
// const contactForm = document.getElementById("contactForm");

// showFormBtn.addEventListener("click", () => {
//   if (contactForm.style.display === "none") {
//     contactForm.style.display = "flex";
//     showFormBtn.style.display = "none"; // hide the button after showing the form
//   }
// });
const showFormBtn = document.getElementById("showFormBtn");
const contactForm = document.getElementById("contactForm");
const messageBox = document.getElementById("message");
const charCount = document.getElementById("charCount");

// Toggle form with animation
showFormBtn.addEventListener("click", () => {
  contactForm.style.display = "flex"; // make it visible first
  setTimeout(() => contactForm.classList.add("show"), 50); // add animation class
  showFormBtn.style.display = "none";
});

// Character counter
messageBox.addEventListener("input", () => {
  charCount.textContent = `${messageBox.value.length} / 255`;
});
// Handle form submission
// contactForm.addEventListener("submit", async (e) => {
//   e.preventDefault();

//   const formData = {
//     name: document.getElementById("name").value.trim(),
//     email: document.getElementById("email").value.trim(),
//     message: messageBox.value.trim()
//   };

//   try {
//     const res = await fetch("http://localhost:3000/contact", {
//       method: "POST",
//       headers: { "Content-Type": "application/json" },
//       body: JSON.stringify(formData)
//     });

//     if (res.ok) {
//       alert("Message sent successfully!");
//       contactForm.reset();
//       charCount.textContent = "0 / 255";
//     } else {
//       alert("Error sending message. Please try again.");
//     }
//   } catch (err) {
//     console.error("Error:", err);
//     alert("Could not connect to the server.");
//   }
// });
contactForm.addEventListener("submit", async (e) => {
  e.preventDefault();

  const formData = {
    name: document.getElementById("name").value.trim(),
    email: document.getElementById("email").value.trim(),
    message: messageBox.value.trim()
  };

  try {
    const res = await fetch("mrme77githubio-backend.vercel.app/contact", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(formData)
    });

    if (res.ok) {
      alert("Message sent successfully!");
      contactForm.reset();
      charCount.textContent = "0 / 255";
      // <-- Here add code to close the form:
      contactForm.style.display = "none";
      showFormBtn.style.display = "inline-block"; // Show the button again
    } else {
      alert("Error sending message. Please try again.");
    }
  } catch (err) {
    console.error("Error:", err);
    alert("Could not connect to the server.");
  }
});



/* 

body {
  margin: 0;
  padding: 0;
  font-family: 'IBM Plex Mono', monospace;
  color: #33ff33;
  background: url('https://images.unsplash.com/photo-1534212995776-36829b3c79fa?auto=format&fit=crop&w=1500&q=80') no-repeat center center fixed;
  background-size: cover;
}

.overlay {
  background-color: rgba(0, 0, 0, 0.85);
  min-height: 100vh;
  padding: 2rem;
}

nav ul {
  display: flex;
  gap: 1.5rem;
  list-style: none;
  padding: 0;
  margin-bottom: 2rem;
  border-bottom: 1px solid #33ff33;
}

nav ul li a {
  color: #33ff33;
  text-decoration: none;
  font-weight: bold;
}

nav ul li a:hover {
  text-decoration: underline;
}

.tab {
  display: none;
}

.tab.active {
  display: block;
}

h1 {
  border-bottom: 1px solid #33ff33;
  padding-bottom: 0.5rem;
  margin-bottom: 1rem;
}

.cursor {
  display: inline-block;
  margin-left: 0.4em;
  color: #33ff33;
  animation: blink 1s step-start infinite;
  font-weight: bold;
}

@keyframes blink {
  0%, 100% { opacity: 1; }
  50% { opacity: 0; }
}

a {
  color: #33ffdd;
}

/* BANNER SECTION */

.banner-container {
  position: relative;
  width: 100%;       /* Full viewport width */
  margin: 0 auto 20px auto;
  overflow: hidden;
}



.banner-image {
  display: block;
  width: 100%;       /* Force full width */
  max-width: 100%;
  height: 350px;       /* Consistent height */
  object-fit: cover;   /* Fill and crop to fit container */
  border-radius: 0;    /* Set to 0 if you want edge-to-edge banners */
  background-color: #111;
}
.banner-image {
  display: block;
  width: 100%;
  height: auto;
  aspect-ratio: 4 / 1;
  object-fit: fill; /* Use 'contain' instead of 'cover' if you want to avoid cropping */
  background-color: #000;
}

/* Text overlay */
.banner-content {
  position: absolute;
  bottom: 20px;
  left: 40px;
  color: #33ffdd;
  text-shadow: 1px 1px 3px rgba(0, 0, 0, 0.7);
}

/* Paragraph alignment */
#bio p,
#articles p,
#projects p,
#github p,
#linkedin p {
  text-align: justify;
}
#chatbot-icon {
  position: fixed;
  bottom: 25px;
  right: 25px;
  background: #0f0;
  color: #000;
  font-size: 24px;
  border-radius: 50%;
  width: 50px;
  height: 50px;
  text-align: center;
  line-height: 50px;
  cursor: pointer;
  z-index: 1000;
  box-shadow: 0 0 10px #0f0;
}

#chatbot-window {
  position: fixed;
  bottom: 90px;
  right: 25px;
  width: 300px;
  max-height: 400px;
  background-color: #000;
  color: #0f0;
  border: 2px solid #0f0;
  padding: 10px;
  display: none;
  flex-direction: column;
  z-index: 1000;
  font-family: monospace;
}

#chatbox {
  height: 250px;
  overflow-y: auto;
  margin-bottom: 10px;
  background-color: #111;
  padding: 5px;
}

#chat-input {
  width: calc(100% - 60px);
  background-color: #222;
  color: #0f0;
  border: 1px solid #0f0;
  padding: 5px;
}

#chatbot-window button {
  width: 50px;
  background: #0f0;
  color: #000;
  border: none;
  cursor: pointer;
}
#world-clocks {
  display: flex;
  justify-content: center;
  gap: 2rem;
  padding: 0.75rem 1rem;
  font-family: 'IBM Plex Mono', monospace;
  font-size: 1.2rem;
  color: #33ff33;
  background-color: rgba(0, 0, 0, 0.9);
  border-top: 1px solid #33ff33;
  border-bottom: 1px solid #33ff33;
  margin-bottom: 1rem;
}

#world-clocks div {
  display: flex;
  align-items: center;
  gap: 0.5rem;
}
 */
